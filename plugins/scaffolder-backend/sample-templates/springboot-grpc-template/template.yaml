apiVersion: backstage.io/v1beta2
kind: Template
metadata:
  name: springboot-template
  title: Spring Boot gRPC Service
  description: Create a simple microservice using gRPC and Spring Boot Java
  tags:
    - recommended
    - java
    - grpc
spec:
  owner: service@example.com
  type: service
  
  parameters:
    - title: Provide some simple information
      required:
        - component_id
        - owner
        - java_package_name
        # - k8sServiceName
        # - k8sDeploymentName
        # - k8sServicePort
        # - environment
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
        java_package_name:
          title: Java Package Name
          type: string
          description: Name for the java package. eg (io.backstage.blah)
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
        k8sServiceName:
          title: Kubernetes Service name
          type: string
          description: Name of the kubernetes service          
        k8sDeploymentName:
          title: Kubernetes Deployment name
          type: string
          description: Name of the kubernetes deployment
        k8sServicePort:
          title: Service Port
          type: integer 
          description: Port number that needs to be exposed
        environment:
          title: Name of the environment
          type: string
          description: Argo name of the environment   
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds: 
              - Group
    - title: Choose a location  
      required:
        - repoUrl
      properties: 
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:cookiecutter
      input:
        targetPath: codebase
        url: ./skeleton
        copyWithoutRender:
          - .github/workflows/*
        values:
          component_id: '{{ parameters.component_id }}'
          description: '{{ parameters.description }}'
          artifact_id: '{{ parameters.component_id }}'
          java_package_name: '{{ parameters.java_package_name }}'
          owner: '{{ parameters.owner }}'
          destination: '{{ parseRepoUrl parameters.repoUrl }}'
          k8sServiceName: '{{ parameters.k8sServiceName }}'
          k8sDeploymentName: '{{ parameters.k8sDeploymentName }}'
          k8sServicePort: '{{ parameters.k8sServicePort }}'
          environment: '{{ parameters.environment }}'          
          http_port: 8080      
    - id: ssp-template
      name: SSP Template Fetch
      action: fetch:cookiecutter
      input:
        targetPath: codebase/ssp
        url: https://github.com/hariohmprasath/ssp-eks-workloads
        copyWithoutRender:
          - .github/workflows/*  
          - envs/*      
    - id: ssp-copy
      name: SSP Setup
      action: fs:ssp
      input:
        targetPath: codebase/ssp
        values:
          owner: '{{ parameters.owner }}'
          environment: '{{ parameters.environment }}'    
          k8sServiceName: '{{ parameters.k8sServiceName }}'
          k8sDeploymentName: '{{ parameters.k8sDeploymentName }}'    
   
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: 'Repo for {{ parameters.k8sServiceName }} with {{ parameters.k8sDeploymentName }} deployment'
        repoUrl: '{{ parameters.repoUrl }}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '{{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

  output:
    remoteUrl: '{{ steps.publish.output.remoteUrl }}'
    entityRef: '{{ steps.register.output.entityRef }}'
